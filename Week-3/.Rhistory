# Check the type of x
(typeof(x))
# Check the type of x
(typeof(x))
# Create a vector
x <- c (1L)
# Check the type of x
(typeof(x))
# Add a number to the vector
x <- c (x,2)
# Check the type of x
(typeof(x))
# Convert the vector to type character
x <- as.character(x)
# Check the type of x
(typeof(x))
# Create a vector
x <- c('A')
# Check the type of x
(typeof(x))
# Convert the vector to type double
x <- as.double(x)
# Check the type of x
(typeof(x))
# Convert the vector to type double
x <- as.double(x)
# Check the type of x
(typeof(x))
# Complete the code for Example d and execute it
x <- 5L
typeof(x)
# Complete the code for Example e and execute it
x <- 5
typeof(x)
# Method 1
x<-vector("character",length=5)
# Display the contents of x
print(x)
# Display the type of x
print(typeof(x))
# Method 4
x <- seq(from=1, to=5, by=0.1)
# Display the contents of x
print(x)
# Display the type of x
print(typeof(x))
# Method 3
x <- c(1,2,3,4,5)
# Display the contents of x
print(x)
# Display the type of x
print(typeof(x))
# Access one element with index 3
x[3]
# Access elements with consecutive indices, 2 to 4: 2,3,4
x[2:4]
# Create a vector
x <- c(1,10,9,8,1,3,5)
# Access one element with index 3
x[3]
# Access elements with consecutive indices, 2 to 4: 2,3,4
x[2:4]
# Access elements with non-consecutive indices, 1,3,5
x[c(1,3,5)]
# Access elements using logical vector
x[c(TRUE,FALSE,FALSE,TRUE,FALSE,FALSE,TRUE)]
# Access elements using the conditional operator <
x[x<10]
# Display the length of the vector
print(length(x))
# Display the type of the vector
print(typeof(x))
# Display the structure of the vector
print(str(x))
# Initialise a named list
my_pie = list(type="key lime", diameter=7, is.vegetarian=TRUE)
# display the list
my_pie
# A list is a special vector whose elements can be of varied type
# Initialise a list
x <-  list(1,"a",0.289,TRUE)
x <- as.list(x)
# Print the names of the list
names(my_pie)
# Retrieve the element named type
my_pie$type
# Retrieve a truncated list
my_pie["type"]
# Retrieve the element named type
my_pie["type"]
# Retrieve the element named type
my_pie[["type"]]
# Install package
install.packages("openintro")
# Load the package
library(openintro)
# Load package
library(tidyverse)
# Load the package
library(openintro)
# Load the package
library(openintro)
# Load package
library(tidyverse)
# Catch a glimpse of the data-set: see how the rows are stacked one below another
glimpse(loans_full_schema)
# Selecting numeric variables
loans <- loans_full_schema %>% # <-- pipe operator
select(paid_total, term, interest_rate,
annual_income,paid_late_fees,debt_to_income)
# View the columns stacked one below another
glimpse(loans)
# Selecting categoric variables
loans <- loans_full_schema %>%
select(grade, state, homeownership, disbursement_method ) # type the chosen columns as in the lecture slide
# View the columns stacked one below another
glimpse(loans)
knitr::opts_chunk$set(echo = TRUE)
# Install package
install.packages("openintro")
# Install package
install.packages("openintro")
install.packages("openintro")
# Install package
install.packages("openintro")
knitr::opts_chunk$set(echo = TRUE)
# Load the package
library(openintro)
```{r,warning=TRUE,message=TRUE,eval=FALSE,echo=TRUE}
# Install package
install.packages("openintro")
# Load the package
library(openintro)
# Load package
library(tidyverse)
# Load package
library(tidyverse)
# Catch a glimpse of the data-set: see how the rows are stacked one below another
glimpse(loans_full_schema)
knitr::opts_chunk$set(echo = TRUE)
# Load the package
library(openintro)
# Load package
library(tidyverse)
# Unicode for smiley face emoji
smiley_emoji <- "\U{1F604}"
# Printing the emoji
cat(smiley_emoji)
# Unicode for smiley face emoji
smiley_emoji <- "\U{1F604}"
# Printing the emoji
print(smiley_emoji)
knitr::opts_chunk$set(echo = TRUE)
# Enter code here
ages <- c('25','30','22','28','33')
print(ages)
setwd()
setwd(/Users/kyrawu/Desktop/money making essentials/NM2207)
setwd(Users/kyrawu/Desktop/money making essentials/NM2207)
setwd('Users/kyrawu/Desktop/money making essentials/NM2207')
setwd("/Users/kyrawu/Desktop/money making essentials/NM2207/Week-3")
setwd("/Users/kyrawu/Desktop/money making essentials/NM2207/Week-3")
# Enter code here
student_info = list(student_names="Alice, Bob, Catherine", scores=85,92,78 , passed=TRUE,TRUE,FALSE)
print(student_info)
# Enter code here
student_info = list(student_names="Alice, Bob, Catherine", scores="85,92,78" , passed="TRUE,TRUE,FALSE")
print(student_info)
# Enter code here
student_info <- list(names = c("Alice", "Bob", "Catherine"),
scores = c(85, 92, 78),
passed_exam = c(TRUE, TRUE, FALSE))
print(student_info)
print(student_info)
# Enter code here
student_info = list(names = c("Alice", "Bob", "Catherine"),
scores = c(85, 92, 78),
passed_exam = c(TRUE, TRUE, FALSE))
print(student_info)
# Enter code here
data <- c(10, 15.5, "20", TRUE)
typeof(data)
typeof(data[1:4])
# Enter code here
data <- c(10, 15.5, "20", TRUE)
typeof(data[1:4])
# Enter code here
# Define the vector
data <- c(10, 15.5, "20", TRUE)
# Determine the data types using typeof()
for (element in data) {
type <- typeof(element)
cat("Value:", element, " | Data Type:", type, "\n")
}
# Enter code here
# Constructing the list
student_info = list(names = c("Alice", "Bob", "Catherine"),
scores = c(85, 92, 78),
passed_exam = c(TRUE, TRUE, FALSE))
# Printing the list
print(student_info)
# Enter code here
# Numeric vector with mixed data types
prices <- c(20.5, 15, "25")
# Convert the last element to numeric using explicit coercion
prices <- as.numeric(prices)
# Print the updated vector
print(prices)
typeof(prices)
# Enter code here
# Creating the vectors
numeric_vector <- c(5, 10, 15)
character_vector <- c("apple", "banana", "cherry")
#Combining the vectors
combined_vector <- c(numeric_vector, character_vector)
#Print combined vector
print(combined_vector)
typeof(combined_vector)
#Print combined vector
print(combined_vector)
typeof(combined_vector)
```
typeof(combined_vector)
# Define the vector
numbers <- c(7, 12.5, "15.7")
# Try to calculate the sum
print(sum(numbers))
# Calculate the sum
print(sum(numbers))
# Convert character values to numeric
numbers <- as.numeric(numbers)
# Calculate the sum
print(sum(numbers))
# Directly calculating the mean
mean(grades)
# Vector of grades
grades <- c(85, 90.5, "75.2")
# Convert vector to numeric (ignoring non-numeric values)
grades <- as.numeric(grades)
# Calculate the mean
print(mean(grades))
# Vector of grades
grades <- c(85, 90.5, "75.2")
# Directly calculating the mean
#mean(grades)
```
# Vector of grades
grades <- c(85, 90.5, "75.2")
# Directly calculating the mean
mean(grades)
# Define the vector
numbers <- c(7, 12.5, "15.7")
# Try to calculate the sum
print(sum(numbers))
# Create the list with different components
mixed_data <- list(numeric_vector = c(10, 20, 30),
character_vector = c("red", "green", "blue"),
logical_vector = c(TRUE, FALSE, TRUE))
# Calculate the mean of the numeric vector
print(mean(mixed_data$numeric_vector))
# Extracting and printing Bob's score
print(student_info$scores(student_info$names == "Bob"))
# Extracting and printing Bob's score
print(student_info$scores[student_info$names == "Bob"])
# Create a numeric vector with random values
values <- c(3.14, 2.71, 1.618, 0.577, 4.669)
x<-integer(5)
print(x)
tail(random_values)
# Create a numeric vector with random values
random_values <- c(3.14, 2.71, 1.618, 0.577, 4.669)
tail(random_values)
print(values[length(values)])
print(tail(values, n = 1))
# Create a numeric vector with random values
random_values <- c(3.14, 2.71, 1.618, 0.577, 4.669)
print(tail(values, n = 1))
words %>% filter(set=="apple")
# Character vector
words <- c("apple", "banana", "cherry", "apple")
words %>% filter(set=="apple")
library(dplyr)
words %>% filter(set=="apple")
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
setwd("/Users/kyrawu/Desktop/money making essentials/NM2207/Week-3")
# Find indices of occurrences of "apple"
apple_indices <- which(words == "apple")
# Character vector
words <- c("apple", "banana", "cherry", "apple")
# Find indices of occurrences of "apple"
apple_indices <- which(words == "apple")
# Print the indices
print(apple_indices)
# Print the extracted ages
print(older_than_30)
# Sample vector of ages
ages <- c(25, 40, 18, 32, 55, 28, 42)
# Extract ages of individuals older than 30
older_than_30 <- ages[ages > 30]
# Print the extracted ages
print(older_than_30)
x <- seq(from=1, to=20, by=3)
print(x)
# Extract every third element from 1:20
every_third <- seq(from=1, to=20, by=3)
# Print the extracted elements
print(every_third)
# Create numeric vector
numbers <- 1:10
# Extract values between the fourth and eighth elements
between <- numbers[4:8]
# Print the extracted values
print(between)
# Extract values between the fourth and eighth elements
between <- numbers[5:7]
# Print the extracted values
print(between)
# Creating numeric data to check
missing_data <- c(10, NA, 15, 20)
# Check via trying to solve for mean
mean(missing_data)
# Creating numeric data to check
missing_data <- c(10, NA, 15, 20)
# Check if the second element is missing (NA)
second_element <- is.na(data[2])
# Print the answer
print(second_element)
# Determine the data types using typeof()
typeof(10)
typeof(15.5)
typeof("20")
typeof(TRUE)
# Determine the data types using typeof()
print(typeof(10))
# Determine the data types using typeof()
print(typeof(10))
print(typeof(15.5))
print(typeof("20"))
print(typeof(TRUE))
# Create logical vector for long fruit names
long_names <- nchar(fruits) > 6
# Character vector of fruit names
fruits <- c("apple", "banana", "strawberry", "kiwi", "pineapple","watermelon","mango","jackfruit","pomelo")
# Create logical vector for long fruit names
long_names <- nchar(fruits) > 6
# Print the long fruit names
print(long_names)
# Print the long fruit names
print(fruit[long_names])
# Print the long fruit names
print(fruits[long_names])
# Print the answer
print(missing_data[second_element])
# Numeric vector of temperatures
temperatures <- c(88, 92, 87, 95, 89, 91, 67, 86, 93, 98, 84, 89, 97, 101, 130)
# Create logical vector for hot days
hot_days <- temperatures > 90
# Print the total number of hot days
print(sum(hot_days))
# Print the numbers that are divisible by 5
print(numbers[divisible_by_5])
# Numeric vector of numbers
numbers <- c(10, 15, 8, 25, 30, 12, 7, 20)
# Create logical vector for numbers divisible by 5
divisible_by_5 <- numbers %% 5 == 0
# Print the numbers that are divisible by 5
print(numbers[divisible_by_5])
# Numeric vector of numbers
numbers <- c(10, 15, 8, 25, 26, 70, 80, 84, 13, 30, 12, 7, 20)
# Create logical vector for numbers divisible by 5
divisible_by_5 <- numbers %% 5 == 0
# Print the numbers that are divisible by 5
print(numbers[divisible_by_5])
# Print the comparison results
print(comparison)
# Two numeric vectors
vector1 <- c(10, 15, 8, 25, 30)
vector2 <- c(12, 10, 6, 20, 25)
# Create logical vector for comparison
comparison <- vector1 > vector2
# Print the comparison results
print(comparison)
vector2 <- c(12, 10, 6, 20, 25, 90)
# Two numeric vectors
vector1 <- c(10, 15, 8, 25, 30, 24)
# Create logical vector for comparison
comparison <- vector1 > vector2
# Print the comparison results
print(comparison)
vector2 <- c(12, 10, 6, 20, 25, 90, 100)
# Create logical vector for comparison
comparison <- vector1 > vector2
# Print the comparison results
print(comparison)
# Create logical vector for comparison
comparison <- vector1 > vector2
vector2 <- c(12, 10, 6, 20, 25, 90, 100, 74)
# Two numeric vectors
vector1 <- c(10, 15, 8, 25, 30, 24, 212, 2)
# Print the comparison results
print(comparison)
# Create a numeric vector with random values
random_values <- c(3.14, 2.71, 1.618, 0.577, 4.669)
print(tail(values, n = 1))
# Create a numeric vector with random values
random_values <- c(3.14, 2.71, 1.618, 0.577, 4.669)
print(tail(random_values, n = 1))
typeof(U+1F604)
install.packages(tlmgr)
**Solution:**  _They will likely be stored as a character datatype. This is because in R, emojis are typically represented by multiple characters through their Unicodes._
install.packages(tlmgr)
install.packages("tlmgr")
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
setwd("/Users/kyrawu/Desktop/money making essentials/NM2207/Week-3")
# Create the list with different components
mixed_data <- list(numeric_vector = c(10, 20, 30),
character_vector = c("red", "green", "blue"),
logical_vector = c(TRUE, FALSE, TRUE))
# Calculate the mean of the numeric vector
print(mean(mixed_data[numeric_vector]))
# Create the list with different components
mixed_data <- list(numeric_vector = c(10, 20, 30),
character_vector = c("red", "green", "blue"),
logical_vector = c(TRUE, FALSE, TRUE))
# Create the list with different components
mixed_data <- list(numeric_vector = c(10, 20, 30),
character_vector = c("red", "green", "blue"),
logical_vector = c(TRUE, FALSE, TRUE))
# Create the list with different components
mixed_data <- list(numeric_vector = c(10, 20, 30),
character_vector = c("red", "green", "blue"),
logical_vector = c(TRUE, FALSE, TRUE))
# Calculate the mean of the numeric vector
print(mean(mixed_data[numeric_vector]))
# Calculate the mean of the numeric vector
print(mean(mixed_data$numeric_vector))
# Numeric vector
sequence <- 1:20
every_third <- seq(from=sequence, by=3)
# Numeric vector
sequence <- 1:20
every_third <- seq(from=sequence, by=3)
?seq
every_third <- seq(from=1, by=3)
# Print the extracted elements
print(every_third)
?sequence
?sequence
# Numeric vector
sequence <- c("aple","banana","cherry","durian","happy","mango")
# Extract every third element from 1:20
every_third <- sequence[seq(1, length(sequence), by = 3)]
# Print the extracted elements
print(every_third)
# Numeric vector
sequence <- 1:20
# Extract every third element from 1:20
every_third <- sequence[seq(1, length(sequence), by = 3)]
# Print the extracted elements
print(every_third)
# Creating numeric data to check
missing_data <- c(10, NA, 15, 20)
# Check if the second element is missing (NA)
second_element <- is.na(missing_data[2])
# Print the answer
print(missing_data[second_element])
# Print the answer
print(second_element)
# Creating numeric data to check
missing_data <- c(10, NA, 15, 20)
# Check if the second element is missing (NA)
second_element <- is.na(missing_data[2])
# Print the answer
print(second_element)
# Define the vector
data <- c(10, 15.5, "20", TRUE)
# Determine the data types using typeof()
print(typeof(data[1]))
# Determine the data types using typeof()
print(typeof(data[1]))
print(typeof(data[2]))
print(typeof(data[3]))
# Define the vector
data <- c(10, 15.5, "20", TRUE)
print(typeof(data[2]))
print(typeof(data[3]))
print(typeof(data[4]))
print(typeof(data[2]))
print(typeof(data[3]))
print(typeof(data[4]))
# Define the vector
data <- c(10, 15.5, "20", TRUE)
# Determine the data types using typeof()
print(typeof(data[1]))
print(typeof(data[2]))
print(typeof(data[3]))
print(typeof(data[4]))
typeof(data[4])
data <- c(10, 15.5)
# Determine the data types using typeof()
print(typeof(data[1]))
print(typeof(data[2]))
# Creating numeric data to check
missing_data <- c(10, NA, 15, 20)
is.na(missing_data)
# Print the answer
print(is.na(missing_data))
is.na(missing_data)
# Print the answer
print(is.na(missing_data))
