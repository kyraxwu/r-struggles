install.packages("knitr")
install.packages("knitr")
knitr::opts_chunk$set(echo = TRUE)
comm_data <- read_csv("CommQuest2023.csv")
install.packages("readr")
install.packages("readr")
```
library (readr)
knitr::opts_chunk$set(echo = TRUE)
comm_data <- read_csv("CommQuest2023.csv")
comm_data <- read_csv("CommQuest2023_Larger.csv")
new_data <- comm_data %>%
select(date, channel, message)
library(dplyr)
new_data <- comm_data %>%
select(date, channel, message)
twitter_secondaug <- comm_data %>%
filter(channel == "Twitter", date == "2023-08-02")
comm_data %>%
arrange(date)
unique_senders <- comm_data %>%
distinct(sender)
comm_data %>%
distinct(sender)
comm_data %>%
group_by(sender) %>%
count()
comm_data %>%
group_by(channel) %>%
count()
pos_sentscore <- comm_data %>%
filter(sentiment_score > 0)
pos_sentscore <- comm_data %>%
filter(sentiment > 0)
summarize ()?
?summarize
?summarise()
?group_by()
top_three_senders <- comm_data %>%
filter(sentiment > 0) %>%
group_by(sender) %>%
summarize(average_sentiment = mean(sentiment_score)) %>%
arrange(desc(average_sentiment)) %>%
head(3)
top_three_senders <- comm_data %>%
filter(sentiment > 0) %>%
group_by(sender) %>%
summarize(average_sentiment = mean(sentiment)) %>%
arrange(desc(average_sentiment)) %>%
head(3)
print(top_three_senders)
?na.rm
?na.rm=TRUE
comm_data %>%
group_by(date) %>%
summarize(average_sentiment = mean(sentiment_score)) %>%
arrange(date)
comm_data %>%
group_by(date) %>%
summarize(average_sentiment = mean(sentiment)) %>%
arrange(date)
negative_sentiment_data <- comm_data %>%
filter(sentiment_score < 0)
negative_sentiment <- comm_data %>%
filter(sentiment < 0)
print (negative_sentiment)
negative_sentiment <- comm_data %>%
filter(sentiment < 0) %>%
select (messages, sentiment)
negative_sentiment <- comm_data %>%
filter(sentiment < 0) %>%
select (message, sentiment)
print (negative_sentiment)
comm_data <- comm_data %>%
mutate(sentiment_label = case_when(
sentiment_score > 0 => "Positive",
comm_data <- comm_data %>%
mutate(sentiment = case_when(
sentiment_score > 0 => "Positive",
comm_data %>%
mutate(sentiment = case_when(
sentiment_score > 0 => "Positive",
?case_when
comm_data <- comm_data %>%
mutate(sentiment_label = case_when(
sentiment_score > 0 ~ "Positive",
sentiment_score == 0 ~ "Neutral",
sentiment_score < 0 ~ "Negative"))
comm_data <- comm_data %>%
mutate(sentiment_label = case_when(
sentiment > 0 ~ "Positive",
sentiment == 0 ~ "Neutral",
sentiment < 0 ~ "Negative"))
print(comm_data)
comm_data <- comm_data %>%
mutate(sentiment_value = case_when(
sentiment > 0 ~ "Positive",
sentiment == 0 ~ "Neutral",
sentiment < 0 ~ "Negative"))
```
print(comm_data)
product_scores <- comm_data %>%
mutate(sentiment_length = sentiment * length(message)))
product_scores <- comm_data %>%
mutate(sentiment_length = sentiment*length(message)))
product_scores <- comm_data %>%
mutate(sentiment_length = sentiment*length(message))
print(comm_data)
print(comm_data)
comm_data <- comm_data %>%
select(-sentiment_label)
print(comm_data)
comm_data <- comm_data %>%
mutate(sentiment_value = case_when(
sentiment > 0 ~ "Positive",
sentiment == 0 ~ "Neutral",
sentiment < 0 ~ "Negative"))
print(comm_data)
product_scores <- comm_data %>%
mutate(sentiment_length = sentiment*length(message))
print(product_scores)
length(message)
length('message')
product_scores <- comm_data %>%
mutate(no_of_character = nchar(message))
print(product_scores)
mutate(sentiment_length = sentiment*no_of_character))
mutate(sentiment_length = sentiment*no_of_character))
mutate(sentiment_length = sentiment*no_of_character)
mutate(sentiment_length = sentiment * no_of_character)
mutate(sentiment_length = 'sentiment' * no_of_character)
print(product_scores)
mutate(sentiment_length = sentiment * no_of_character)
mutate(sentiment_length = no_of_character)
product_scores <- comm_data %>%
mutate(no_of_character = nchar(message))
product_scores <- comm_data %>%
mutate(no_of_character = nchar(message)) %>%
mutate(sentiment_length = sentiment * no_of_character)
print(product_scores)
top_day <- group_by(date) %>%
summarise(total_characters = sum(nchar(message))) %>%
arrange(desc(total_characters)) %>%
head(1)
comm_data %>%
group_by(date) %>%
summarise(total_characters = sum(nchar(message))) %>%
arrange(desc(total_characters)) %>%
head(1)
product_scores <- comm_data %>%
mutate(no_of_character = nchar(message)) %>%
mutate(sentiment_length = sentiment * no_of_character)
print(product_scores)
library(readr)
comm_data <- read_csv("CommQuest2023_Larger.csv")
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(readr)
comm_data %>%
group_by(date) %>%
summarize(average_sentiment = mean(sentiment))
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(readr)
comm_data <- read_csv("CommQuest2023_Larger.csv")
new_data <- comm_data %>%
select(date, channel, message)
twitter_secondaug <- comm_data %>%
filter(channel == "Twitter", date == "2023-08-02")
comm_data %>%
arrange(date)
comm_data %>%
distinct(sender)
comm_data %>%
group_by(sender) %>%
count()
comm_data %>%
group_by(channel) %>%
count()
top_three_senders <- comm_data %>%
filter(sentiment > 0) %>%
group_by(sender) %>%
summarize(average_sentiment = mean(sentiment)) %>%
arrange(desc(average_sentiment)) %>%
head(3)
print(top_three_senders)
comm_data %>%
group_by(date) %>%
summarize(average_sentiment = mean(sentiment)) %>%
arrange(date)
negative_sentiment <- comm_data %>%
filter(sentiment < 0) %>%
select (message, sentiment)
print (negative_sentiment)
comm_data <- comm_data %>%
mutate(sentiment_value = case_when(
sentiment > 0 ~ "Positive",
sentiment == 0 ~ "Neutral",
sentiment < 0 ~ "Negative"))
print(comm_data)
product_scores <- comm_data %>%
mutate(no_of_character = nchar(message)) %>%
mutate(sentiment_length = sentiment * no_of_character)
print(product_scores)
comm_data %>%
group_by(date) %>%
summarise(total_characters = sum(nchar(message))) %>%
arrange(desc(total_characters)) %>%
head(1)
comm_data %>%
group_by(date) %>%
summarize(average_sentiment = mean(sentiment))
print(twitter_secondaug)
print(new_data)
comm_data <- read_csv("CommQuest2023_Larger.csv")
comm_data
product_scores <- comm_data %>%
mutate(no_of_character = nchar(message)) %>%
mutate(sentiment_length = sentiment * no_of_character) %>%
arrange(desc(sentiment_length))
print(product_scores)
