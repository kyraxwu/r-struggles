# Enter code here
say_hello_to <- function(name) {
print(paste0("Hello", name,"!"))
}
print (say_hello_to)
say_hello_to <- function(name) {
print(paste0("Hello", name,"!"))
}
print(paste0("Hello", name,"!"))
# Enter code here
name <- "Kashif"
print(paste0("Hello", name,"!"))
print(paste0("Hello ", name,"!"))
say_hello_to <- function(name) {
print(paste0("Hello ", name, "!"))
}
say_hello_to <- function(name) {
print(paste0("Hello ", name, "!"))
}
name <- "Kashif"
print(paste0("Hello ", name,"!"))
say_hello_to <- function(name) {
print(paste0("Hello ", name, "!"))
}
print(paste0("Hello ", name, "!"))
say_hello_to <- function(name) {
print(paste0("Hello ", name, "!"))
}
# Enter code here
say_hello_to("Ethan")
# Enter code here
say_hello_to("Kashif")
say_hello_to("Zach")
say_hello_to("Deniz")
say_hello_to <- function(name) {
print(paste0("Hello ", name, "!"))
}
# Enter code here
say_hello_to("Kashif")
typeof('+')
typeof(`+`)
typeof(sum)
typeof(say_hello_to)
typeof(mean)
calc_sample_mean <- function(sample_size) {
mean(rnorm(sample_size))
}
calc_sample_mean(1000)
# With vector input
calc_sample_mean(c(100, 300, 3000))
library(tidyverse)
#creating a vector to test our function
sample_tibble <- tibble(sample_sizes =
c(100, 300, 3000))
#using rowwise groups the data by row, # allowing calc_sample_mean sample_tibble %>% group_by(sample_sizes) %>% mutate(sample_means =
calc_sample_mean(sample_sizes))
#using rowwise groups the data by row, # allowing calc_sample_mean
sample_tibble %>%
group_by(sample_sizes) %>%
mutate(sample_means =
calc_sample_mean(sample_sizes))
# First define the function
calc_sample_mean <- function(sample_size,
our_mean=0,
our_sd=1) {
sample <- rnorm(sample_size,
mean = our_mean,
sd = our_sd)
mean(sample)
}
# Call the function
cal_sample_mean(sample_size = 10)
# Call the function
calc_sample_mean(sample_size = 10)
# we can change one or two defaults.
# You can refer by name, or use position
calc_sample_mean(10, our_sd = 2)
calc_sample_mean(10, our_mean = 6)
calc_sample_mean(10, 6, 2)
calc_sample_mean(10, our_mean = 6)
calc_sample_mean(our_mean = 5)
# set error=TRUE to see the error message in the output
calc_sample_mean(our_mean = 5)
add_two(4)
# Add 2 to the input x
add_two <- function(x) { x+2
}
add_two(4)
add_two(-34)
add_two(5.784)
# another reassignment of z
foo(z = 4)
# Initialize z
z <- 1
# declare a function, notice how we pass a value of 2 for z foo <- function(z = 2) {
# reassigning z
z <- 3
return(z+3) }
# Initialize z
z <- 1
# declare a function, notice how we pass a value of 2 for z
foo <- function(z = 2) {
# reassigning z
z <- 3
return(z+3) }
# another reassignment of z
foo(z = 4)
# Accessing z outside the function
sprintf("The final value of z after reassigning it to a different value inside the function is %d")
# Accessing z outside the function
sprintf("The final value of z after reassigning it to a different value inside the function is %d")
# Accessing z outside the function
sprintf("The final value of z after reassigning it to a different value inside the function is %d",z)
knitr::opts_chunk$set(echo = TRUE)
sprintf("The value assigned to z outside the function is %d,z)
# declare a function, notice how we pass a value of 2 for z
foo <- function(z = 2) { # reassigning z
z <- 3
return(z+3)
} foo()
sprintf("The value assigned to z outside the function is %d",z)
# declare a function, notice how we pass a value of 2 for z
foo <- function(z = 2) {
z <- 3
return(z+3)
} foo()
# declare a function, notice how we pass a value of 2 for z
foo <- function(z = 2) {
z <- 3
return(z+3)
} foo()
# declare a function, notice how we pass a value of 2 for z
foo <- function(z = 2) {
z <- 3
return(z+3)
} foo()
z <- 3
return(z+3)
# declare a function, notice how we pass a value of 2 for z
foo <- function(z = 2) {
z <- 3
return(z+3)
} foo()
foo()
sprintf("The value assigned to z outside the function is %d",z)
